# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from cs3.auth.registry.v1beta1 import registry_api_pb2 as cs3_dot_auth_dot_registry_dot_v1beta1_dot_registry__api__pb2


class RegistryAPIStub(object):
    """Auth Registry API

    The Auth Registry API is meant to as registry to obtain
    information of available auth providers.
    For example, to use OIDC or Kerberos for authentication.

    The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
    NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
    "OPTIONAL" in this document are to be interpreted as described in
    RFC 2119.

    The following are global requirements that apply to all methods:
    Any method MUST return CODE_OK on a succesful operation.
    Any method MAY return NOT_IMPLEMENTED.
    Any method MAY return INTERNAL.
    Any method MAY return UNKNOWN.
    Any method MAY return UNAUTHENTICATED.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAuthProviders = channel.unary_unary(
                '/cs3.auth.registry.v1beta1.RegistryAPI/GetAuthProviders',
                request_serializer=cs3_dot_auth_dot_registry_dot_v1beta1_dot_registry__api__pb2.GetAuthProvidersRequest.SerializeToString,
                response_deserializer=cs3_dot_auth_dot_registry_dot_v1beta1_dot_registry__api__pb2.GetAuthProvidersResponse.FromString,
                )
        self.ListAuthProviders = channel.unary_unary(
                '/cs3.auth.registry.v1beta1.RegistryAPI/ListAuthProviders',
                request_serializer=cs3_dot_auth_dot_registry_dot_v1beta1_dot_registry__api__pb2.ListAuthProvidersRequest.SerializeToString,
                response_deserializer=cs3_dot_auth_dot_registry_dot_v1beta1_dot_registry__api__pb2.ListAuthProvidersResponse.FromString,
                )


class RegistryAPIServicer(object):
    """Auth Registry API

    The Auth Registry API is meant to as registry to obtain
    information of available auth providers.
    For example, to use OIDC or Kerberos for authentication.

    The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
    NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
    "OPTIONAL" in this document are to be interpreted as described in
    RFC 2119.

    The following are global requirements that apply to all methods:
    Any method MUST return CODE_OK on a succesful operation.
    Any method MAY return NOT_IMPLEMENTED.
    Any method MAY return INTERNAL.
    Any method MAY return UNKNOWN.
    Any method MAY return UNAUTHENTICATED.
    """

    def GetAuthProviders(self, request, context):
        """Returns the auth provider that is reponsible for the given
        resource reference.
        MUST return CODE_NOT_FOUND if the reference does not exist.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAuthProviders(self, request, context):
        """Returns a list of the available auth providers known by this registry.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RegistryAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAuthProviders': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAuthProviders,
                    request_deserializer=cs3_dot_auth_dot_registry_dot_v1beta1_dot_registry__api__pb2.GetAuthProvidersRequest.FromString,
                    response_serializer=cs3_dot_auth_dot_registry_dot_v1beta1_dot_registry__api__pb2.GetAuthProvidersResponse.SerializeToString,
            ),
            'ListAuthProviders': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAuthProviders,
                    request_deserializer=cs3_dot_auth_dot_registry_dot_v1beta1_dot_registry__api__pb2.ListAuthProvidersRequest.FromString,
                    response_serializer=cs3_dot_auth_dot_registry_dot_v1beta1_dot_registry__api__pb2.ListAuthProvidersResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cs3.auth.registry.v1beta1.RegistryAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RegistryAPI(object):
    """Auth Registry API

    The Auth Registry API is meant to as registry to obtain
    information of available auth providers.
    For example, to use OIDC or Kerberos for authentication.

    The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
    NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
    "OPTIONAL" in this document are to be interpreted as described in
    RFC 2119.

    The following are global requirements that apply to all methods:
    Any method MUST return CODE_OK on a succesful operation.
    Any method MAY return NOT_IMPLEMENTED.
    Any method MAY return INTERNAL.
    Any method MAY return UNKNOWN.
    Any method MAY return UNAUTHENTICATED.
    """

    @staticmethod
    def GetAuthProviders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cs3.auth.registry.v1beta1.RegistryAPI/GetAuthProviders',
            cs3_dot_auth_dot_registry_dot_v1beta1_dot_registry__api__pb2.GetAuthProvidersRequest.SerializeToString,
            cs3_dot_auth_dot_registry_dot_v1beta1_dot_registry__api__pb2.GetAuthProvidersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListAuthProviders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cs3.auth.registry.v1beta1.RegistryAPI/ListAuthProviders',
            cs3_dot_auth_dot_registry_dot_v1beta1_dot_registry__api__pb2.ListAuthProvidersRequest.SerializeToString,
            cs3_dot_auth_dot_registry_dot_v1beta1_dot_registry__api__pb2.ListAuthProvidersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
